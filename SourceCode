import colorgram  # Library to extract colors from an image
from turtle import *  # Importing all functions from the turtle graphics library
from random import choice  # Importing the choice function to pick random elements


def show_hirst_pattern(file='lol.jpg'):
    '''This function extracts colors from an image using colorgram
    and creates a Hirst-like dot painting using Turtle graphics.'''

    # Initialize a list to store extracted colors in RGB format
    colorRGB = []

    # Extract the top 12 colors from the image file (returns color objects)
    colors = colorgram.extract(file, 12)  # 'file' is the input image

    # Loop through the extracted colors and get their RGB values
    for color in colors:
        R = color.rgb.r  # Red component of the color
        G = color.rgb.g  # Green component of the color
        B = color.rgb.b  # Blue component of the color

        # Append the RGB tuple to the color list
        colorRGB += [(R, G, B)]

    '''Using Turtle graphics to create the dot pattern'''
    # Create a turtle object named timmy to do the drawing
    timmy = Turtle()

    # Create a screen object where the drawing will be displayed
    screen = Screen()

    # Set color mode of the screen to RGB (0-255 values)
    screen.colormode(255)

    # Hide the turtle cursor to avoid showing it while drawing
    timmy.ht()

    # Speed up the drawing to make it as fast as possible
    timmy.speed("fastest")

    MOVE_X = 50  # Distance to move horizontally between dots

    # Lift the pen and move the turtle to starting position (-220, -200)
    timmy.pu()
    timmy.goto(-220, -200)

    '''Drawing the 10x10 dot grid'''
    # Outer loop to control rows (10 rows total)
    for _horiz_ in range(10):
        # Inner loop to control columns (10 dots per row)
        for _ in range(10):
            # Set a random color from the extracted list for each dot
            timmy.pencolor(choice(colorRGB))

            # Lower the pen and draw a filled dot of size 20
            timmy.pd()
            timmy.dot(20)

            # Lift the pen, and move the turtle forward by MOVE_X units
            timmy.pu()
            timmy.fd(MOVE_X)

        # Get the current position of the turtle (after completing a row)
        coordinate_x, coordinate_y = timmy.pos()

        '''Move the turtle to the starting position of the next row'''
        if _horiz_ % 2 == 0:  # For even rows (0, 2, 4,...), move left to right
            timmy.goto(coordinate_x - MOVE_X, coordinate_y + MOVE_X)  # Move up and back left
            timmy.setheading(180)  # Set heading to face left
        else:  # For odd rows (1, 3, 5,...), move right to left
            timmy.goto(coordinate_x + MOVE_X, coordinate_y + MOVE_X)  # Move up and continue right
            timmy.setheading(0)  # Set heading to face right

    # Wait for a mouse click to exit the drawing screen
    screen.exitonclick()


# Call the function to display the Hirst dot pattern
show_hirst_pattern('lol2.jpg')
